#include "stdafx.h"
#include "SystemWindow.h"


SystemWindow::SystemWindow(HWND window,
							Ogre::SceneManager *sceneManager,
							Ogre::RTShader::ShaderGenerator *shaderGenerator)
	:m_WindowHandle(window),
	m_SceneManager(sceneManager),
	m_ShaderGenerator(shaderGenerator)
{
	m_TextureLoader = new SystemTextureLoader(window);
	int length = GetWindowTextLength(m_WindowHandle);
    LPSTR strWindowName  = new CHAR[length];
    
    GetWindowText(m_WindowHandle, strWindowName, length+1);

	m_Title = Ogre::String(strWindowName);

	m_TextureName = "window" +Ogre::StringConverter::toString( (int)m_WindowHandle);
	m_MaterialName = "window/base1" + Ogre::StringConverter::toString( (uint)m_WindowHandle);

	Ogre::TexturePtr ptr = Ogre::TextureManager::getSingleton().createManual(m_TextureName,
	Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
	TEX_TYPE_2D,
	256,
	256,
	1,
	PF_A8R8G8B8,
	TU_STATIC_WRITE_ONLY,
	m_TextureLoader);


	Ogre::MaterialPtr material = Ogre::MaterialManager::getSingleton().getByName("window/base",Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME);
	//clone the material then add our own texture to it
	//clone does not seem to clone the shaders generated by the RTSS
	Ogre::MaterialPtr windowMaterial = material->clone(m_MaterialName);
	windowMaterial->getTechnique(0)->getPass(0)->getTextureUnitState(0)->setTexture(ptr);
	windowMaterial->load();

	m_ShaderGenerator->createShaderBasedTechnique(m_MaterialName, Ogre::MaterialManager::DEFAULT_SCHEME_NAME, Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME);
}


SystemWindow::~SystemWindow(void)
{
	Ogre::TextureManager::getSingleton().remove(m_TextureName);
	Ogre::MaterialManager::getSingleton().remove(m_MaterialName);
}


void SystemWindow::DisplayWindow()
{
	//testing doing this here for now with a single window texture from the loaded windows.
	//using geometry instead of billboards as the rotation towards the camera is not so cool
	// will look into instanced geometry later

	Ogre::Entity *ent;
    Ogre::Plane p;
    p.normal = Ogre::Vector3(0,0,1); p.d = 0;
    Ogre::MeshManager::getSingleton().createPlane(
        "FloorPlane", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
        p, 1, 1, 1, 1, true, 1, 1, 1, Ogre::Vector3::UNIT_Y);

    ent = m_SceneManager->createEntity("bob", "FloorPlane");

	Ogre::MaterialPtr material = Ogre::MaterialManager::getSingleton().getByName(m_MaterialName);
	ent->setMaterial(material);
	Ogre::SceneNode* m_SceneNode = m_SceneManager->getRootSceneNode()->createChildSceneNode(m_MaterialName);
	m_SceneNode->attachObject(ent);
	m_SceneNode->setPosition(Ogre::Vector3(0,2,-.5));
}


Ogre::String SystemWindow::GetMaterialName()
{
	return m_MaterialName;
}
